Spring JdbcTemplate
===================

Spring JdbcTemplate is a powerful mechanism to connect to the database and execute SQL queries. It internally uses JDBC API, but eliminates a lot of problems of JDBC API.

Limitations of JDBC API
-----------------------
The limitations of JDBC API:

(a) We need to write a lot of code before and after executing the query, such as creating connection, statement, closing resultset, connection etc.

(b) We need to perform exception handling code on the database logic.

(c) We need to handle transaction.

(d) Repetition of all these codes from one to another database logic is a time consuming task.

Spring "JdbcTemplate" eliminates all the above mentioned problems of JDBC API. It provides you methods to write the queries directly, so it saves a lot of work and time.

PRACTICALS
==========

1) create a DB table in MySQL "db_edureka" Database with username : root and password: root
mysql> use db_edureka;
mysql> create table emp(empno integer(5) primary key, ename varchar(25), sal float(10,2));  

2) Create a New Maven Project
- Integrate spring-context , spring-jdbc , mysql connector dependencies in pom.xml
from mvnrepository.com  [spring, jdbc, mysql]
pom.xml

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.22</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>5.3.22</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.29</version>
		</dependency>
	</dependencies>

3) Create Entity (POJO) class to represent the database table

Employee.java

package co.edureka.ems.entity;

public class Employee {
	private Integer employeeNo;
	private String employeeName;
	private Float employeeSalary;

	public Employee() {	}

	public Employee(Integer employeeNo, String employeeName, Float employeeSalary) {		
		this.employeeNo = employeeNo;
		this.employeeName = employeeName;
		this.employeeSalary = employeeSalary;
	}

	public Integer getEmployeeNo() {
		return employeeNo;
	}

	public void setEmployeeNo(Integer employeeNo) {
		this.employeeNo = employeeNo;
	}

	public String getEmployeeName() {
		return employeeName;
	}

	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}

	public Float getEmployeeSalary() {
		return employeeSalary;
	}

	public void setEmployeeSalary(Float employeeSalary) {
		this.employeeSalary = employeeSalary;
	}

	@Override
	public String toString() {
		String employee = String.format("Employee[%3d | %-13s | %.2f]", employeeNo, employeeName, employeeSalary);
		return employee;	
	}
}


3) Create an Interface for DAO operations
EmployeeDao.java

package co.edureka.ems.dao;
import java.util.List;
import co.edureka.ems.entity.Employee;

public interface EmployeeDao {
	public Integer saveEmployee(Employee emp);
	
	public Integer updateEmployee(Employee emp);
	
	public Integer deleteEmployeeById(Integer eno);
	
	public Employee findEmployeeById(Integer eno);
	
	public List<Employee> findAllEmployees();
}


4) Implementation Class for DAO Interface

EmployeeDaoImpl.java

package co.edureka.ems.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

import co.edureka.ems.entity.Employee;

public class EmployeeDaoImpl implements EmployeeDao {
	private JdbcTemplate jt;

	public JdbcTemplate getJt() {
		return jt;
	}

	public void setJt(JdbcTemplate jt) {
		this.jt = jt;
	}

	public Integer saveEmployee(Employee emp) {
		String sql = "insert into emp values(" + emp.getEmployeeNo() + ",'" + emp.getEmployeeName() + "',"
				+ emp.getEmployeeSalary() + ")";
		int rowsInserted = jt.update(sql);
		return rowsInserted;
	}

	public Integer updateEmployee(Employee emp) {
		String sql = "update emp set ename='" + emp.getEmployeeName() + "', sal=" + emp.getEmployeeSalary()
				+ " where empno=" + emp.getEmployeeNo();
		Integer rowsUpdated = jt.update(sql);
		return rowsUpdated;
	}

	public Integer deleteEmployeeById(Integer eno) {
		String sql = "delete from emp where empno=" + eno;
		return jt.update(sql);
	}

	public Employee findEmployeeById(final Integer eno) {
		String sql = "select ename, sal from emp where empno=" + eno;
		try {
			Employee emp = jt.queryForObject(sql, new RowMapper<Employee>() {

				public Employee mapRow(ResultSet rs, int rowNum) throws SQLException {
					String name = rs.getString(1);
					float sal = rs.getFloat(2);
					Employee emp = new Employee(eno, name, sal);
					return emp;
				}
			});

			return emp;
		} catch (Exception ex) {
			return null;
		}
	}

	public List<Employee> findAllEmployees() {
		String sql = "select * from emp";
		List<Employee> emps = null;
		
		emps = jt.query(sql, new ResultSetExtractor<List<Employee>>() {

			public List<Employee> extractData(ResultSet rs) throws SQLException, DataAccessException {
				List<Employee> list = new ArrayList<Employee>();
				
				while(rs.next()) {
					Integer eno = rs.getInt(1);
					String name=rs.getString(2);
					Float sal = rs.getFloat(3);
					
					Employee emp = new Employee(eno, name, sal);
					list.add(emp);
				}
				return list;
			}
			
		});
		return emps;
	}

}


5) Create Service Interface
EmployeeService.java

package co.edureka.ems.services;

import co.edureka.ems.entity.Employee;

public interface EmployeeService {
	public void saveEmployee(Employee emp);
	
	public void updateEmployee(Employee emp);
	
	public void deleteEmployeeById(Integer eno);
	
	public Employee searchEmployeeById(Integer eno);
	
	public void getAllEmployees();
}


6) Create Implementation for Service Interface
EmployeeServiceImpl.java

package co.edureka.ems.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import co.edureka.ems.dao.EmployeeDao;
import co.edureka.ems.entity.Employee;

public class EmployeeServiceImpl implements EmployeeService {
	@Autowired
	private EmployeeDao dao;
	
	public void saveEmployee(Employee emp) {
		int n = dao.saveEmployee(emp);
		if(n > 0)
			System.out.println("###---- Employee Saved ---###");
	}

	public void updateEmployee(Employee emp) {
		Integer rowsUpdated = dao.updateEmployee(emp);
		if (rowsUpdated > 0) {
			System.out.println("$$$---- EMPLOYEE UPDATED ----$$$");
		} else {
			System.out.println("$$$---- NO MATCHING EMPLOYEE FOR UPDATION ----$$$");
		}		
	}

	public void deleteEmployeeById(Integer eno) {
		Integer rowsDeleted = dao.deleteEmployeeById(eno);
		if (rowsDeleted > 0) {
			System.out.println("$$$---- EMPLOYEE DELETED ----$$$");
		} else {
			System.out.println("$$$---- NO MATCHING EMPLOYEE FOR DELETION ----$$$");
		}		
	}

	public Employee searchEmployeeById(Integer eno) {
		return dao.findEmployeeById(eno);
	}

	public void getAllEmployees() {
		List<Employee> emps = dao.findAllEmployees();
		for (Employee emp : emps) {
			System.out.println(emp);
			try {
				Thread.sleep(1000);
			} catch (Exception ex) {
			}
		} 		
	}
}


7) Create Spring Bean Configuration File
src/main/resources/employee-beans.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<context:annotation-config/>

	<bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/db_edureka"/>
		<property name="username" value="root"/>
		<property name="password" value="root"/>
	</bean>
	
	<bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="ds"/>
	</bean>
	
	<bean class="co.edureka.ems.dao.EmployeeDaoImpl">
		<property name="jt" ref="template"/>
	</bean>
	
	<bean id="emp-service" class="co.edureka.ems.services.EmployeeServiceImpl"/>
</beans>



8) Main Application - EMSMain.java

package co.edureka.ems;

import java.util.Scanner;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import co.edureka.ems.entity.Employee;
import co.edureka.ems.services.EmployeeService;

public class EMSMain {

	static Scanner sc = new Scanner(System.in);
	
	public static void main(String[] args) throws Exception{
		ApplicationContext context = new ClassPathXmlApplicationContext("employee-beans.xml");
		
		EmployeeService service = (EmployeeService) context.getBean("emp-service");
		
		while(true) {
			System.out.println("1. New Employee");
			System.out.println("2. Update Employee" );
			System.out.println("3. Delete Employee");
			System.out.println("4. Search Employee");
			System.out.println("5. All Employees");
			System.out.println("6. Exit");
			
			System.out.println("-------------------------------------------------------");
			System.out.print("enter an option: ");
			int opt = sc.nextInt();
			
			switch(opt) {
			 case 1:
				Employee employee = createEmployee();
				service.saveEmployee(employee);
				break;
			 case 2:
				break;
			 case 3:
				System.out.print("enter employee no: ");
				int empno = sc.nextInt();
				service.deleteEmployeeById(empno);
				break;
			 case 4:
				System.out.print("enter employee no: ");
				int eno = sc.nextInt();
				Employee emp = service.searchEmployeeById(eno);
				if(emp != null)
					System.out.println(emp);
				else
					System.out.println("###--- NO MATCHING EMPLOYEE ---###");
				break;
			 case 5:
				service.getAllEmployees(); 
				break;
			 case 6:
				System.out.println("@@@--- application designed & developed by ---@@@");
				System.out.println("@@@--- team @ edureka ---@@@");
				sc.close();
				return; 
			 default:
				 System.out.println("@@@--- INVALID OPTION **** TRY AGAIN ---@@@");				
			}//switch
			System.out.println("-------------------------------------------------------");			
		}//while		
	} //main
	
	private static Employee createEmployee() {
		System.out.print("enter employee no: ");
		int no = sc.nextInt();
		sc.nextLine();
		
		System.out.print("enter employee name: ");
		String name = sc.nextLine();
		
		System.out.print("enter employee salary: ");
		float salary = sc.nextFloat();
		
		return new Employee(no, name, salary);
	}	

}
